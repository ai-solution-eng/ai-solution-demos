# Default values for bar.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  create: false
  annotations: {}
  name: ""

# Frontend configuration
frontend:
  # Image configuration
  image:
    repository: tpomas/bar-frontend
    pullPolicy: IfNotPresent
    tag: "0.0.3"
  
  # Deployment configuration
  replicaCount: 1
  
  # Container resources
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  # Environment variables
  env:
    # Backend API URL - will be constructed from backend service
    REACT_APP_API_URL: "http://{{ include \"bar.fullname\" . }}-backend:{{ .Values.backend.service.port }}"

# Backend configuration
backend:
  # Image configuration
  image:
    repository: tpomas/bar-backend
    pullPolicy: IfNotPresent
    tag: "0.0.2"
  
  # Deployment configuration
  replicaCount: 1
  
  # Container resources
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  
  # Service configuration
  service:
    type: ClusterIP
    port: 5000
    targetPort: 5000
  
  # Environment variables
  env:
    # OpenAI API configuration
    BAR_API_KEY: "MLIS DEPLOYMENT API TOKEN"  # Required: OpenAI API key
    BAR_API_BASE: "MLIS DEPLOYMENT ENDPOINT"
    BAR_MODEL_ID: "MODEL ID"
    MAX_WORKERS: "3"
  
  # Health check configuration
  livenessProbe:
    httpGet:
      path: /api/health
      port: 5000
    initialDelaySeconds: 30
    periodSeconds: 30
  
  readinessProbe:
    httpGet:
      path: /api/health
      port: 5000
    initialDelaySeconds: 5
    periodSeconds: 10

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: bar.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: bar-tls
  #    hosts:
  #      - bar.local

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity for pod assignment
affinity: {}

# Security context
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Image pull secrets
imagePullSecrets: []

# Annotations to be added to pods
podAnnotations: {}

# Labels to be added to pods
podLabels: {}

ezua:
  virtualService:
    endpoint: "bar.${DOMAIN_NAME}"
    istioGateway: "istio-system/ezaf-gateway"